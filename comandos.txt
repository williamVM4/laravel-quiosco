npm create vite@latest
npm run dev

php artisan make:model --migration --controller Categoria

php artisan make:seeder CategoriaSeeder
https://gist.github.com/codigoconjuan/2286ec5b38301776f6adc105dba0510d

php artisan make:factory CategoriaFactory

php artisan db:seed --class=CategoriaSeeder

php artisan db:seed

php artisan make:resource CategoriaCollection
php artisan make:resource CategoriaResource

/api/ -> en url

php artisan make:model Producto --resource --api --migration 

https://gist.github.com/codigoconjuan/a4f356244c9a57e876cb0de00558b671

php artisan make:seeder ProductoSeeder

php artisan migrate:refresh --seed

https://dev.mysql.com/downloads/connector/j/

php artisan make:request RegistroRequest

En headers: Accept application/json
X-Requested-With XMLHttpRequest

  'supports_credentials' => true,

  Authorization

  Berarer token


  {
  "total": 100.50,
  "productos": [
    {
      "id": 1,
      "cantidad": 2
    },
    {
      "id": 15,
      "cantidad": 1
    },
    {
      "id": 30,
      "cantidad": 3
    }
    // Continúa con los demás productos que desees incluir
  ]
}

https://notasweb.me/entrada/crear-un-api-rest-en-laravel/


Las políticas en Laravel son clases que organizan la lógica de autorización alrededor de un modelo o recurso en particular. Aquí hay un ejemplo de cómo podría verse una política para el modelo Pedido:

php artisan make:policy PedidoPolicy --model=Pedido

namespace App\Policies;

use App\Models\User;
use App\Models\Pedido;
use Illuminate\Auth\Access\HandlesAuthorization;

class PedidoPolicy
{
    use HandlesAuthorization;

    /**
     * Determine whether the user can view the pedido.
     *
     * @param  \App\Models\User  $user
     * @param  \App\Models\Pedido  $pedido
     * @return mixed
     */
    public function view(User $user, Pedido $pedido)
    {
        // Reemplaza esto con tu propia lógica
        return $user->id === $pedido->user_id;
    }

    /**
     * Determine whether the user can delete the pedido.
     *
     * @param  \App\Models\User  $user
     * @param  \App\Models\Pedido  $pedido
     * @return mixed
     */
    public function delete(User $user, Pedido $pedido)
    {
        // Reemplaza esto con tu propia lógica
        return $user->id === $pedido->user_id;
    }

    // Puedes agregar más métodos para otras acciones como 'create', 'update', etc.

}


    En este ejemplo, la política tiene dos métodos: view y delete. Cada método recibe una instancia del User autenticado y una instancia del Pedido que se está intentando ver o eliminar.

Cada método debe devolver true si el usuario tiene permiso para realizar la acción, y false en caso contrario.

Para registrar esta política, debes agregarla al array $policies en tu AuthServiceProvider:


protected $policies = [
    Pedido::class => PedidoPolicy::class,
];



https://notasweb.me/entrada/crear-un-api-rest-en-laravel/